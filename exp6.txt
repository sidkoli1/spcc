lex filename.l
gcc lex.yy.c
a.exe
yacc -d filename.y
lex filename.y
gcc lex.yy.c filename.tab.c
a.exe
1. LEX program for “Hello World”:

%{
#include<stdio.h>
%}
%%
"\n" { printf("Hello World\n"); }
%%
int yywrap(void) {}
int main()
{
    yylex();
    return 0;
}

-------------------------------------------------

2. LEX program to count uppercase and lowercase letters:

%{
#include<stdio.h>
#include<string.h>
int i = 0;
int j = 0;
%}
%%
[a-z] { i++; }
[A-Z] { j++; }
"\n" { printf("Lowercase: %d \nUppercase: %d\n", i, j); }
%%
int yywrap(void) {}
int main()
{
    yylex();
    return 0;
}

-------------------------------------------------

3. LEX program to count vowels and consonants:

%{
#include<stdio.h>
#include<string.h>
int i = 0;
int j = 0;
%}
%%
[aeiouAEIOU] { i++; }
[a-zA-Z] { j++; }
"\n" { printf("\nVowels: %d \nConsonants: %d\n", i, j-i); }
%%
int yywrap(void) {}
int main()
{
    yylex();
    return 0;
}

-------------------------------------------------

4. LEX program to count and identify tokens:

%{
#include<stdio.h>
#include<string.h>
int keywords = 0;
int identifiers = 0;
int operators = 0;
int numbers = 0;
int special = 0;
%}
%%
"while"|"if"|"else"|"int"|"float"|"printf" { keywords++; printf("\nKeyword: "); ECHO; }
[a-zA-Z_][a-zA-Z0-9_]* { identifiers++; printf("\nIdentifier: "); ECHO; }
"<="|"=="|"="|"++"|"-"|"*"|"+" { operators++; printf("\nOperator: "); ECHO; }
[0-9]+ { numbers++; printf("\nNumber: "); ECHO; }
([(){}|,;"]) { special++; printf("\nSpecial Symbol: "); ECHO; }
"\n" { printf("\nTotal Tokens: %d", keywords + identifiers + operators + numbers + special); }
%%
int yywrap(void) {}
int main()
{
    yylex();
    return 0;
}

-------------------------------------------------

5. LEX program to count characters, words, sentences, tabs, numbers, and spaces:

%{
#include<stdio.h>
#include<string.h>
int sentence = 0;
int tabs = 0;
int spaces = 0;
int characters = 0;
int words = 0;
%}
%%
"END" { printf("\nSentences: %d \nCharacters: %d \nWords: %d \nTabs: %d \nSpaces: %d\n", sentence, characters, words, tabs, spaces); }
"\n" { sentence++; }
" " { spaces++; }
"\t" { tabs++; }
[a-zA-Z0-9]* { words++; characters += yyleng; }
%%
int yywrap(void) {}
int main()
{
    yylex();
    return 0;
}

-------------------------------------------------

6. LEX program to recognize valid arithmetic expressions:

%{
#include<stdio.h>
int v = 0, op = 0, id = 0;
%}
%%
[0-9][0-9]* { id++; printf("\nIdentifier: "); ECHO; }
[\+\-\*\/\=] { op++; printf("\nOperator: "); ECHO; }
"(" { v++; }
")" { v--; }
.|\n { return 0; }
%%
int main()
{
    printf("Enter the expression:\n");
    yylex();
    if ((op + 1) == id && v == 0)
    {
        printf("\n\nIdentifiers are: %d\nOperators are: %d\n", id, op);
        printf("\nExpression is Valid\n");
    }
    else
        printf("\nExpression is Invalid\n");
    return 1;
}
int yywrap()
{
    return 1;
}

-------------------------------------------------

7. YACC Calculator performing +, -, *, /:

File 1 [calc.l]:

%{
#include<stdio.h>
#include "calc.tab.h"
extern int yylval;
%}
%%
[0-9]+ { yylval = atoi(yytext); return NUMBER; }
[\t] ;
[\n] return 0;
. return yytext[0];
%%
int yywrap()
{
    return 1;
}

File 2 [calc.y]:

%{
#include<stdio.h>
void yyerror();
int yylex();
int flag = 0;
%}
%token NUMBER
%left '+' '-'
%left '*' '/'
%%
ArithmeticExpression: E { printf("\nResult=%d\n", $$); return 0; };
E: E '+' E { $$ = $1 + $3; }
 | E '-' E { $$ = $1 - $3; }
 | E '*' E { $$ = $1 * $3; }
 | E '/' E { $$ = $1 / $3; }
 | NUMBER { $$ = $1; }
;
%%
void main()
{
    printf("\nEnter Arithmetic Expression: ");
    yyparse();
}
void yyerror()
{
    printf("\nEntered arithmetic expression is Invalid");
    flag = 1;
}

-------------------------------------------------

8. YACC program for strings ending with `b` (anb):

File 1 [calc.l]:

%{
#include<stdio.h>
#include "string.tab.h"
%}
%%
[a] { return a; }
[b] { return b; }
\n { return NL; }
. { return yytext[0]; }
%%
int yywrap()
{
    return 1;
}

File 2 [string.y]:

%{
#include<stdio.h>
#include<stdlib.h>
void yyerror();
int yylex();
%}
%token a b NL
%%
Statement: S NL { printf("Valid String\n"); exit(0); };
S: a A b;
A: A a | ;
%%
void main()
{
    printf("\nEnter String: ");
    yyparse();
}
void yyerror()
{
    printf("Invalid String");
    exit(0);
}

-------------------------------------------------

9. YACC program for `anbn`:

Demo.y:

%{
#include<stdio.h>
#include<stdlib.h>
void yyerror();
int yylex();
int i = 0;
int j = 0;
%}
%token a b NL
%%
Statement: S NL {
    if (i == j)
        printf("Valid String\n a = %d b = %d", i, j);
    else
        printf("Invalid string\n a = %d b = %d", i, j);
    exit(0);
};
S: A B;
A: A a { i++; } | ;
B: B b { j++; } | ;
%%
void main()
{
    printf("\nEnter String: ");
    yyparse();
}
void yyerror()
{
    printf("Invalid String");
    exit(0);
}

-------------------------------------------------

10. YACC program for `anbn+1`:

Demo.y:

%{
#include<stdio.h>
#include<stdlib.h>
void yyerror();
int yylex();
int i = 0;
int j = 0;
%}
%token a b NL
%%
Statement: S NL {
    if (i + 1 == j)
        printf("Valid String\n a = %d b = %d", i, j);
    else
        printf("Invalid string\n a = %d b = %d", i, j);
    exit(0);
};
S: A B;
A: A a { i++; } | ;
B: B b { j++; } | ;
%%
void main()
{
    printf("\nEnter String: ");
    yyparse();
}
void yyerror()
{
    printf("Invalid String");
    exit(0);
}

-------------------------------------------------

11. YACC program for `a2nbn`:

Demo.y:

%{
#include<stdio.h>
#include<stdlib.h>
void yyerror();
int yylex();
int i = 0;
int j = 0;
%}
%token a b NL
%%
Statement: S NL {
    if (i == 2 * j)
        printf("Valid String\n a = %d b = %d", i, j);
    else
        printf("Invalid string\n a = %d b = %d", i, j);
    exit(0);
};
S: A B;
A: A a { i++; } | ;
B: B b { j++; } | ;
%%
void main()
{
    printf("\nEnter String: ");
    yyparse();
}
void yyerror()
{
    printf("Invalid String");
    exit(0);
}

-------------------------------------------------

12. YACC program for `anbncn`:

File 1 [demo.l]:

%{
#include<stdio.h>
#include "demo.tab.h"
%}
%%
[a] { return a; }
[b] { return b; }
[c] { return c; }
\n { return NL; }
. { return yytext[0]; }
%%
int yywrap()
{
    return 1;
}

File 2 [demo.y]:

%{
#include<stdio.h>
#include<stdlib.h>
void yyerror();
int yylex();
int i = 0;
int j = 0;
int k = 0;
%}
%token a b c NL
%%
Statement: S NL {
    if (i == j && i == k)
        printf("Valid String\n a = %d b = %d c = %d", i, j, k);
    else
        printf("Invalid string\n a = %d b = %d c = %d", i, j, k);
    exit(0);
};
S: A B C;
A: A a { i++; } | ;
B: B b { j++; } | ;
C: C c { k++; } | ;
%%
void main()
{
    printf("\nEnter String: ");
    yyparse();
}
void yyerror()
{
    printf("Invalid String");
    exit(0);
}
